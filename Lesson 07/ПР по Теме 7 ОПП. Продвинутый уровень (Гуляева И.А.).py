from abc import ABC, abstractmethod

"""Практическая работа по Теме 7 'ООП. Продвинутый уровень'"""

"""Задание 7.1."""

print('\n7.1.Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора\n'
      'класса (метод __init__()), который должен принимать данные (список списков)\n'
      'для формирования матрицы.\n'
      'Подсказка: матрица — система некоторых математических величин, расположенных\n'
      'в виде прямоугольной схемы. Например: 3 (строки) на 2 (столбцы) или 3 (строки)\n'
      'на 3 (столбцы) или 2 на 4 или 5 на 8 и т.д.\n'
      'Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в\n'
      'привычном виде. Далее реализовать перегрузку метода __add__() для реализации\n'
      'операции сложения двух объектов класса Matrix (двух матриц). Результатом\n'
      'сложения должна быть новая матрица.\n'
      'Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент\n'
      'первой строки первой матрицы складываем с первым элементом первой строки\n'
      'второй матрицы и т.д.')
print('-' * 80)


class Matrix:
    def __init__(self, my_list):
        self.my_list = my_list

    def __str__(self):
        for row in self.my_list:
            for k in row:
                print(f'{k:4d}', end='')
            print()
        return '\tКрасиво!?!'

    def __add__(self, other):
        for i in range(len(self.my_list)):
            for j in range(len(other.my_list[i])):
                self.my_list[i][j] = self.my_list[i][j] + other.my_list[i][j]
        return f'Очень{Matrix.__str__(self)}'


m1 = Matrix([[15, 14, 13, 12], [11, 10, 9, 8], [7, 6, 5, 4], [3, 2, 1, 0]])
print('Первая исходная матрица:')
print(m1)
m2 = Matrix([[-12, -10, -8, -6], [-9, -7, -5, -3], [-6, -4, -2, 0], [-3, -1, 1, 3]])
print('Вторая исходная матрица:')
print(m2)
print('Результирующая матрица:')
print(m1.__add__(m2))

print('*' * 80)


"""Задание 7.2."""

print('\n7.2.Реализовать проект расчёта суммарного расхода ткани на производство\n'
      'одежды. Основная сущность (класс) этого проекта — одежда, которая может\n'
      'иметь определённое название. К типам одежды в этом проекте относятся пальто\n'
      'и костюм. У этих типов одежды существуют параметры: размер (для пальто) и\n'
      'рост (для костюма). Это могут быть обычные числа: V и H, соответственно.\n'
      'Для определения расхода ткани по каждому типу одежды использовать формулы:\n'
      'для пальто (V / 6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих\n'
      'методов на реальных данных. Реализовать общий подсчёт расхода ткани.\n'
      'Проверить на практике полученные на этом уроке знания: реализовать\n'
      'абстрактные классы для основных классов проекта, проверить на практике\n'
      'работу декоратора @property.')
print('-' * 80)


class Myabc(ABC):
    def __init__(self, param):
        self.param = param

    def __add__(self, other):
        return f'Сумма затраченной ткани на пошив единиц изделий равна:' \
               f' {(self.param / 6.5 + 0.5) + (2 * other.param + 0.3):.2f} условных единиц.'

    @property
    def consumption(self):
        return f'Общие расходы:\n{(coat + costume)}'


class Clothes(Myabc):

    @abstractmethod
    def unit(self):
        pass


class Coat(Clothes):
    def consumption(self):
        return f'Для пошива пальто необходимо: {self.param / 6.5 + 0.5 :.2f} условных единиц ткани.'

    def unit(self):
        return 'Абстрактное пальто.'


class Costume(Clothes):
    def consumption(self):
        return f'Для пошива костюма необходимо: {2 * self.param + 0.3 :.2f} условных единиц ткани.'

    def unit(self):
        return 'Абстрактный костюм.'


print('Расчёты разхода ткани на производство одежды:')
coat = Coat(56)
print(coat.consumption())
print(coat.unit())
costume = Costume(175)
print(costume.consumption())
print(costume.unit())
print('\t', '.' * 30)
print(Myabc(ABC).consumption)

print('*' * 85)


"""Задание 7.3."""

print('\n7.3.Реализовать программу работы с органическими клетками, состоящими из ячеек.\n'
      'Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,\n'
      'соответствующий количеству ячеек клетки (целое число). В классе должны быть\n'
      'реализованы методы перегрузки арифметических операторов: сложение (__add__()),\n'
      'вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные\n'
      'методы должны применяться только к клеткам и выполнять увеличение, уменьшение,\n'
      'умножение и целочисленное (с округлением до целого) деление клеток, соответственно.\n'
      'Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно\n\t\t'
      'равняться сумме ячеек исходных двух клеток.\n'
      'Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность\n\t\t'
      'количества ячеек двух клеток больше нуля, иначе выводить соответствующее\n\t\t'
      'соощение.\n'
      'Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как\n\t\t'
      'произведение количества ячеек этих двух клеток.\n'
      'Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как\n\t\t'
      'целочисленное деление количества ячеек этих двух клеток.\n'
      'В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и\n'
      'количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод\n'
      'должен возвращать строку вида: "*****\эн*****\эн*****...", где количество ячеек между\n'
      '"\эн" равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в\n'
      'последний ряд записываются все оставшиеся.\n'
      'Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда\n'
      'метод make_order() вернет строку: "*****\эн*****\эн**". Или, количество ячеек клетки\n'
      'равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:\n'
      '"*****\эн*****\эн*****".')
print('-' * 85)


class Cell:
    def __init__(self, quantity):
        self.quantity = quantity

    def __add__(self, other):
        add = self.quantity + other.quantity
        return f'- Сумма ячеек двух клеток равна: {add}'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'- Разность ячеек двух клеток равна: {sub}' if sub > 0 else 'Увы, клетки погибли...'

    def __truediv__(self, other):
        truediv = self.quantity // other.quantity or other.quantity // self.quantity
        return f'- Целочислительное частное ячеек двух клеток равно: {truediv}'

    def __mul__(self, other):
        mul = self.quantity * other.quantity
        return f'- Произведение ячеек двух клеток равно: {mul}'

    def make_order(self, row):
        count = 0
        result = ''
        for i in range(int(self.quantity / row)):
            count += 1
            result += str(count) + ' ' + '*' * row + '\n'
        result += str(count+1) + ' ' + '*' * (self.quantity % row)
        return result


cell1 = Cell(23)
cell2 = Cell(15)
print('Результаты эксперементов с клетками:')
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 / cell2)
print(cell1 * cell2)
print('\t', '.' * 30)
print(f'Распределение ящеек первой клетки по рядам:\n{cell1.make_order(10)}')
print(f'Распределение ящеек второй клетки по рядам:\n{cell2.make_order(6)}')

print('*' * 60)
print('END')
