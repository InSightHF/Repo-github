
"""Практическая работа по Теме 2 'Встроенные типы и операции с ними'"""

"""Задание 2.1."""

print('\n2.1.Создать список и заполнить его элементами различных типов данных.\n'
      'Реализовать скрипт проверки типа данных каждого элемента. Использовать\n'
      'функцию type() для проверки типа. Элементы списка можно не запрашивать\n'
      'у пользователя, а указать явно, в программе.')
print('-' * 70)

my_li = ['Я', 78, 'раз', 'приветствую', 'Вас', 14.5, 338]
print('Имеем список:\n\t', my_li)
print('Каждый элемент данного списка и его тип:')
for i in my_li:
    print('\t', i, '-', type(i))

print('*' * 70)


"""Задание 2.2."""

print('\n2.2.Для списка реализовать обмен значений соседних элементов.\n'
      'Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.\n'
      'При нечётном количестве элементов последний сохранить на своём месте.\n'
      'Для заполнения списка элементов нужно использовать функцию input().')
print('-' * 70)

li = input('Создайте список элементов: ').split()
print('\t', '.' * 30)
amount = len(li)
amount_n = None
if amount % 2 == 0:
    amount_n = 'чётное'
else:
    amount_n = 'нечётное'

print('Чудесно! Вы ввели', amount_n, 'количество элементов списка, а именно:',
      amount, '\n\t', li)

final_li = []
for j in range(len(li)):
    if j % 2 == 0:
        try:
            final_li.append(li[j + 1])
            li[j], li[j + 1] = li[j + 1], li[j]
        except IndexError:
            final_li.append(li[j])
    else:
        final_li.append(li[j - 1])

print('И программа переставила элементы согласно условию:\n\t', li)
print('*' * 70)


"""Задание 2.3."""

print('\n2.3.Пользователь вводит месяц в виде целого числа от 1 до 12.\n'
      'Сообщить, к какому времени года относится введённый месяц\n'
      '(зима, весна, лето, осень). Напиcать решения через list и dict.')
print('-' * 83)

while True:
    month_n = input('Введите месяц в виде целого числа от 1 до 12:\n\t'
                    'month_n = ')
    try:
        month_n = int(month_n)
        print('Вы ввели целое число!')
        if 1 > month_n or month_n > 12:
            print('Однако, оно находится вне требуемого диапазона. Попробуйте новый ввод.')
            print('\t', '.' * 25)
            continue
        print('Замечательно! Сейчас программа покажет предварительные и конечный результаты!\n\t', '.' * 25)
        break
    except ValueError:
        print('Вы ввели некорректные данные. Осуществите правильный ввод.')
    print('\t', '.' * 30)

month = [[12, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]]
print('Имеем вложенные списки месяцев, распределённх по временам года:',
      type(month), '\n', month)
month1 = sorted([a for b in month for a in b])
print('Сформирован следующий список месяцев года:', type(month1), '\n', month1)
month2 = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль',
          'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']
dictionary1 = {keys: values for keys, values in zip(month2, month1)}
print('Сформирован следующий помесячный словарь:', type(dictionary1), '\n', dictionary1)
seasons = ['Зима', 'Весна', 'Лето', 'Осень']
dictionary = {keys: values for keys, values in zip(seasons, month)}
print('Сформирован следующий словарь времён года:', type(dictionary), '\n', dictionary)
print('\t', '.' * 30)

for key, value in dictionary.items():
    if value[0] == month_n:
        for k, v in dictionary1.items():
            if v == month_n:
                print('Соответственно -', k, '(' + str(month_n) + '-й месяц года) - это', key + '!')
    elif value[1] == month_n:
        for k, v in dictionary1.items():
            if v == month_n:
                print('Соответственно -', k, '(' + str(month_n) + '-й месяц года) - это', key + '!')
    elif value[2] == month_n:
        for k, v in dictionary1.items():
            if v == month_n:
                print('Соответственно -', k, '(' + str(month_n) + '-й месяц года) - это', key + '!')

print('*' * 83)


"""Задание 2.4."""

print('\n2.4.Пользователь вводит строку из нескольких слов, разделённых пробелами.\n'
      'Вывести каждое слово с новой строки. Строки нужно пронумеровать. Если слово\n'
      'длинное, выводить только первые 10 букв в слове.')
print('-' * 83)

text = list(input('Введите строку из нескольуих слов, разделённых пробелами:\n\t').split())
print('\t', '.' * 30)
amount = len(text)
print('Преобразование введённой строки в список, сотоящий из', amount, 'слов:\n\t', text)
print('Результат выполнения программой условий задания:')
for index, item in enumerate(text, 1):
    if len(item) > 10:
        item = item[0:10]
    print('\t', index, '-', item)

print('*' * 83)


"""Задание 2.5."""

print('\n2.5.Реализовать структуру «Рейтинг», представляющую собой набор натуральных\n'
      'чисел, который не возрастает. У пользователя нужно запрашивать новый элемент\n'
      'рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то\n'
      'новый элемент с тем же значением должен разместиться после них.')
print('-' * 77)

print('ПАМЯТКА: Основная функция натурального числа — указать количество предметов.\n'
      'Наименьшее натуральное число: единица (1). Наибольшее натуральное число:\n'
      'не существует. Натуральный ряд бесконечен. Если запись числа совпадает с\n'
      'цифрой "0", то его называют «ноль», который не является натуральным числом,\n'
      'но он может обозначать отсутствие. Ноль предметов значит — ни одного.\n'
      'Также отрицательные и дробные числа не являются натуральными.')
print('-' * 77)

la = [7, 5, 3, 3, 2]
print('"Рейтинг" представлен набором натуральных чисел:\n\t', la)
N = int(input('Введите новое число показания "Рейтинга":\n\tN = '))
print('\t', '.' * 30)

print('Итерации в цикле, после которых структура "Рейтинга" изменилась:')
for index, item in enumerate(la):
    print('\t', index, '-', item)
    if N > item:
        la.insert(index, N)
        print('Теперь "Рейтинг" имеет вид:\n\t', la)
        break
    elif (N == item) and (la.count(item) == 2):
        la.insert(index+2, N)
        print('Вот как "Рейтинг" выглядит сейчас:\n\t', la)
        break
    elif N == item:
        la.insert(index+1, N)
        print('Программа обновила "Рейтинг":\n\t', la)
        break
    elif N < la[-1]:
        la.append(N)
        print('И снова "Рейтинг" обновлён:\n\t', la)
        break

print('*' * 77)


"""Задание 2.6."""

print('\n2.6.*Реализовать структуру данных «Товары». Она должна представлять собой\n'
      'список кортежей. Каждый кортеж хранит информацию об отдельном товаре.\n'
      'В кортеже должно быть два элемента — номер товара и словарь с параметрами,\n'
      'то есть характеристиками товара: название, цена, количество, единица измерения.\n'
      'Структуру нужно сформировать программно, запросив все данные у пользователя.\n'
      'Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ —\n'
      'характеристика товара, например, название. Тогда значение — список\n'
      'значений-характеристик, например, список названий товаров.')
print('-' * 77)

print('Для учёта товаров на складе учётчику необходимо:\n\t'
      'а) ввести критерии учёта товара;\n\t'
      'б) ввести характеристики всех учитываемых товаров.')
print('Для анализа товаров товароведу требуются:\n\t'
      'а) реализованные структуры товаров в виде списка кортежей;\n\t'
      'б) реализованная аналитика о товарах в виде словаря.')
print('\t', '.' * 30)

amount = int(input('Введите количество учитываемых товаров:\n\tamount = '))
criteria = list(input('Введите критерии учёта товара (в одну строку через пробел):\n\t').split())
print('\t', '.' * 30)

accounting = []
analytics = {}
quantitys = []
titles = []
prices = []
count = 0
while count < amount:
    count += 1
    print('Ввод данных', str(count) + '-го товара:')
    title = input('Введите название: ')
    price = int(input('Введите цену: '))
    quantity = int(input('Введите количество: '))
    units = input('Введите единицы измерения: ')
    options = [title, price, quantity, units]
    titles.append(title)
    prices.append(price)
    quantitys.append(quantity)
    tuple_k = (count, {keys: values for keys, values in zip(criteria, options)})
    print('Великолепно! Данные', str(count) + '-го товара закортежены:\n', tuple_k)
    accounting.append(tuple_k)
    datas = [titles, prices, quantitys, units]
    analytics = {keys: values for keys, values in zip(criteria, datas)}
    print('\t', '.' * 30)

print('Таким образом, после прекрасной работы учётчика и данной программы, товаровед имеет:\n\t'
      'а) структуры товаров в виде списка кортежей:\n', accounting, '\n\t'
      'б) аналитику о товарах в виде словаря:\n', analytics)

print('*' * 110)
print('END')
